AWSTemplateFormatVersion: '2010-09-09'
Description: Harvest Consultations scheduled task

Parameters:
  SubnetIds: { Type: List<AWS::EC2::Subnet::Id>, Description: Subnet IDs }
  ContainerImage: { Type: String, Default: ghcr.io/wagov-dtt/harvest-consultations:main }
  ScheduleExpression: { Type: String, Default: rate(1 hour) }


Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ECSCluster

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{ Effect: Allow, Principal: { Service: ecs-tasks.amazonaws.com}, Action: sts:AssumeRole }]
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement: [{ Effect: Allow, Action: secretsmanager:GetSecretValue, Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret/${AWS::StackName}" }]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-Task
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: '1024'
      Memory: '3072'
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-Container
          Image: !Ref ContainerImage
          Command: ["sqlmesh", "plan", "--auto-apply", "--run", "--verbose"]
          Essential: true
          Secrets: 
            - {Name: SECRETS_YAML, ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}:SECRETS_YAML::" }
            - {Name: MYSQL_DUCKDB_PATH, ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}:MYSQL_DUCKDB_PATH::" }
            - {Name: MYSQL_PWD, ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}:MYSQL_PWD::" }
            - {Name: SQLMESH__VARIABLES__OUTPUT_DB, ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}:SQLMESH__VARIABLES__OUTPUT_DB::" }
            - {Name: SQLMESH__VARIABLES__OUTPUT_TABLE, ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}:SQLMESH__VARIABLES__OUTPUT_TABLE::" }

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{ Effect: Allow, Principal: { Service: scheduler.amazonaws.com }, Action: sts:AssumeRole }]
      Policies:
        - PolicyName: SchedulerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement: [{ Effect: Allow, Action: ecs:RunTask, Resource: '*' }]

  EventBridgeScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub ${AWS::StackName}-Scheduler
      ScheduleExpression: !Ref ScheduleExpression
      FlexibleTimeWindow: { Mode: FLEXIBLE, MaximumWindowInMinutes: 5 }
      Target:
        Arn: !GetAtt ECSCluster.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        EcsParameters:
          TaskDefinitionArn: !Ref TaskDefinition
          TaskCount: 1
          LaunchType: FARGATE
          NetworkConfiguration:
            AwsvpcConfiguration:
              Subnets: !Ref SubnetIds
              AssignPublicIp: ENABLED

Outputs:
  ClusterArn: { Description: ECS Cluster ARN, Value: !GetAtt ECSCluster.Arn }
  TaskDefinitionArn: { Description: Task Definition ARN, Value: !Ref TaskDefinition }
